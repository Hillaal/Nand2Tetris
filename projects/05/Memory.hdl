// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
       // DMux4Way(in=true, sel = address[13..14], a=dataSel, b=screenSel, c=KBDSel, d=unused); 

        DMux(in=true, sel=address[14], a=dataSel, b=ioSel);
        DMux(in=ioSel, sel=address[13], a=screenSel, b=KBDSel);

        // Data
        And(a=load, b=dataSel, out=dataLoad);
        RAM16K(in=in, load=dataLoad, address=address[0..13], out=dataOut);

        // Screen
        DMux(in=screenSel, sel=address[12], a=screenLowSel, b=screenHighSel);
        And(a=load, b=screenLowSel, out=screenLowLoad);
        And(a=load, b=screenHighSel, out=screenHighLoad);
        RAM4K(in=in, load=screenLowLoad, address=address[0..11], out=screenLowOut);
        RAM4K(in=in, load=screenHighLoad, address=address[0..11], out=screenHighOut);
        Mux16(a=screenLowOut, b=screenHighOut, sel=screenHighSel, out=screenOut);
       
        // Keyboard
        And(a=load, b=KBDSel, out=KBDLoad);
        Register(in=in, load=KBDLoad, out=KBDOut);
        
        Mux16(a=screenOut, b=KBDOut, sel=KBDSel, out=ioOut);
        Mux16(a=dataOut, b=ioOut, sel=ioSel, out=out);

        //Mux4Way16 (a=dataOut, b=screenOut, c=KBDOut, d=true,sel=address[13..14], out=out);
}